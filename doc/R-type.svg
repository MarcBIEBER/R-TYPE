<?xml version="1.0" encoding="UTF-8"?>
<!-- Do not edit this file with editors other than diagrams.net -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="4030px" height="2252px" viewBox="-0.5 -0.5 4030 2252" content="&lt;mxfile host=&quot;app.diagrams.net&quot; modified=&quot;2022-11-13T13:06:24.458Z&quot; agent=&quot;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.1 Safari/605.1.15&quot; etag=&quot;fyXvBaybygs4BXfDxbBl&quot; version=&quot;20.5.3&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;C5RBs43oDa-KdzZeNtuy&quot; name=&quot;Page-1&quot;&gt;&lt;/diagram&gt;&lt;/mxfile&gt;"><defs><clipPath id="mx-clip-1227-181-252-184-0"><rect x="1227" y="181" width="252" height="184"/></clipPath><clipPath id="mx-clip-766-77-277-109-0"><rect x="766" y="77" width="277" height="109"/></clipPath><clipPath id="mx-clip-686-257-436-160-0"><rect x="686" y="257" width="436" height="160"/></clipPath><clipPath id="mx-clip-1553-90-385-150-0"><rect x="1553" y="90" width="385" height="150"/></clipPath><clipPath id="mx-clip-1582-316-328-261-0"><rect x="1582" y="316" width="328" height="261"/></clipPath><clipPath id="mx-clip-1050-485-471-228-0"><rect x="1050" y="485" width="471" height="228"/></clipPath><clipPath id="mx-clip-94-475-651-483-0"><rect x="94" y="475" width="651" height="483"/></clipPath><clipPath id="mx-clip-273-1017-477-270-0"><rect x="273" y="1017" width="477" height="270"/></clipPath><clipPath id="mx-clip-1050-781-355-302-0"><rect x="1050" y="781" width="355" height="302"/></clipPath><clipPath id="mx-clip-1050-1155-483-257-0"><rect x="1050" y="1155" width="483" height="257"/></clipPath><clipPath id="mx-clip-228-1349-522-291-0"><rect x="228" y="1349" width="522" height="291"/></clipPath><clipPath id="mx-clip-1050-1491-504-397-0"><rect x="1050" y="1491" width="504" height="397"/></clipPath><clipPath id="mx-clip-268-1714-482-281-0"><rect x="268" y="1714" width="482" height="281"/></clipPath><clipPath id="mx-clip-1050-1948-276-284-0"><rect x="1050" y="1948" width="276" height="284"/></clipPath><clipPath id="mx-clip-3456-134-503-423-0"><rect x="3456" y="134" width="503" height="423"/></clipPath><clipPath id="mx-clip-2870-44-446-466-0"><rect x="2870" y="44" width="446" height="466"/></clipPath><clipPath id="mx-clip-2082-181-518-376-0"><rect x="2082" y="181" width="518" height="376"/></clipPath><clipPath id="mx-clip-3088-637-210-127-0"><rect x="3088" y="637" width="210" height="127"/></clipPath><clipPath id="mx-clip-3107-829-173-244-0"><rect x="3107" y="829" width="173" height="244"/></clipPath><clipPath id="mx-clip-2693-621-343-486-0"><rect x="2693" y="621" width="343" height="486"/></clipPath><clipPath id="mx-clip-2079-594-475-582-0"><rect x="2079" y="594" width="475" height="582"/></clipPath><clipPath id="mx-clip-2072-1239-475-406-0"><rect x="2072" y="1239" width="475" height="406"/></clipPath><clipPath id="mx-clip-2072-1705-475-204-0"><rect x="2072" y="1705" width="475" height="204"/></clipPath><clipPath id="mx-clip-2649-1239-475-778-0"><rect x="2649" y="1239" width="475" height="778"/></clipPath></defs><g><rect x="3385" y="0" width="644" height="673" fill="#e6d0de" stroke="none" pointer-events="all"/><path d="M 3385 0 L 3658 0 L 3658 60 L 3648 75 L 3385 75 Z" fill="#e1d5e7" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 3658 0 L 4029 0 L 4029 673 L 3385 673 L 3385 75" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 271px; height: 1px; padding-top: 37px; margin-left: 3386px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><b><font style="font-size: 32px;">Asset Manager</font></b></div></div></div></foreignObject><text x="3521" y="41" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Asset Manager</text></switch></g><rect x="0" y="0" width="2003" height="2250" fill="#b9e0a5" stroke="none" pointer-events="all"/><path d="M 0 0 L 459 0 L 459 113 L 449 128 L 0 128 Z" fill="#b9e0a5" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 459 0 L 2003 0 L 2003 2250 L 0 2250 L 0 128" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 457px; height: 1px; padding-top: 64px; margin-left: 1px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><span style="font-size: 102px;"><b>ECS</b></span></div></div></div></foreignObject><text x="229" y="68" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">ECS</text></switch></g><path d="M 1223 176 L 1223 150 L 1483 150 L 1483 176" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="all"/><path d="M 1223 176 L 1223 360 L 1483 360 L 1483 176" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 1223 176 L 1483 176" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1352.5" y="167.5">System</text></g><rect x="1223" y="176" width="260" height="184" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-1227-181-252-184-0)" font-size="12px"><text x="1228.5" y="193.5">Public:</text><text x="1228.5" y="207.5">    System(sf::RenderWindow &amp;window);</text><text x="1228.5" y="221.5">    void init();</text><text x="1228.5" y="235.5">            void draw();</text><text x="1228.5" y="249.5">            void update();</text><text x="1228.5" y="263.5">    EntityManager &amp;getManager();</text><text x="1228.5" y="277.5">            inline System &amp;getInstance();</text><text x="1228.5" y="305.5">Private:</text><text x="1228.5" y="319.5">            System *_instance;</text><text x="1228.5" y="333.5">            EntityManager *_manager;</text></g><rect x="2022" y="0" width="1321" height="2248" fill="#ffe6cc" stroke="none" pointer-events="none"/><path d="M 2022 0 L 2481 0 L 2481 113 L 2471 128 L 2022 128 Z" fill="#ffe6cc" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 2481 0 L 3343 0 L 3343 2248 L 2022 2248 L 2022 128" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 458px; height: 1px; padding-top: 64px; margin-left: 2023px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;"><span style="font-size: 102px;"><b>Game</b></span></div></div></div></foreignObject><text x="2252" y="68" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Game</text></switch></g><path d="M 904 181 L 904 219.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 904 224.88 L 900.5 217.88 L 904 219.63 L 907.5 217.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 761.5 72 L 761.5 46 L 1046.5 46 L 1046.5 72" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 761.5 72 L 761.5 181 L 1046.5 181 L 1046.5 72" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 761.5 72 L 1046.5 72" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="903.5" y="63.5">IComponent</text></g><rect x="761.5" y="72" width="285" height="109" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-766-77-277-109-0)" font-size="12px"><text x="767" y="89.5">Public:    </text><text x="767" y="103.5">    IComponent() = default;</text><text x="767" y="117.5">            virtual ~IComponent() = default;</text><text x="767" y="131.5">            virtual bool init() = 0;</text><text x="767" y="145.5">            virtual void draw() = 0;</text><text x="767" y="159.5">            virtual void update() = 0;</text></g><path d="M 904 412 L 904 594 L 1039.13 594" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1044.38 594 L 1037.38 597.5 L 1039.13 594 L 1037.38 590.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 904 412 L 904 711.57 L 755.37 711.57" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 750.12 711.57 L 757.12 708.07 L 755.37 711.57 L 757.12 715.07 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 904 412 L 904 1147 L 760.37 1147" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 755.12 1147 L 762.12 1143.5 L 760.37 1147 L 762.12 1150.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 904 412 L 904 927 L 1039.13 927" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1044.38 927 L 1037.38 930.5 L 1039.13 927 L 1037.38 923.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 904 412 L 904 1278.57 L 1039.13 1278.57" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1044.38 1278.57 L 1037.38 1282.07 L 1039.13 1278.57 L 1037.38 1275.07 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 904 412 L 904 1489.57 L 760.37 1489.57" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 755.12 1489.57 L 762.12 1486.07 L 760.37 1489.57 L 762.12 1493.07 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 904 412 L 904 1684.57 L 1039.13 1684.5" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1044.38 1684.5 L 1037.38 1688 L 1039.13 1684.5 L 1037.38 1681 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 904 412 L 904 1849.57 L 760.37 1849.57" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 755.12 1849.57 L 762.12 1846.07 L 760.37 1849.57 L 762.12 1853.07 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 904 412 L 904 2085 L 1039.13 2085" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1044.38 2085 L 1037.38 2088.5 L 1039.13 2085 L 1037.38 2081.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 682 252 L 682 226 L 1126 226 L 1126 252" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 682 252 L 682 412 L 1126 412 L 1126 252" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 682 252 L 1126 252" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="903.5" y="243.5">Component</text></g><rect x="682" y="252" width="444" height="160" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-686-257-436-160-0)" font-size="12px"><text x="687.5" y="269.5">template &lt;typename T&gt;</text><text x="687.5" y="283.5">inline size_t getComponentId() noexcept;</text><text x="687.5" y="325.5">constexpr size_t maxComponents = 64;</text><text x="687.5" y="339.5">constexpr size_t maxEntities = 5000;</text><text x="687.5" y="367.5">using ComponentBitset = std::bitset&lt;maxComponents&gt;;</text><text x="687.5" y="381.5">using ComponentList = std::array&lt;IComponent *, maxComponents&gt;;</text><text x="687.5" y="395.5">inline size_t getUniqueComponentId();</text></g><path d="M 1745.5 235 L 1745.5 278.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1745.5 283.88 L 1742 276.88 L 1745.5 278.63 L 1749 276.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1549 85 L 1549 59 L 1942 59 L 1942 85" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 1549 85 L 1549 235 L 1942 235 L 1942 85" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 1549 85 L 1942 85" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1745" y="76.5">EntityManager</text></g><rect x="1549" y="85" width="393" height="150" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-1553-90-385-150-0)" font-size="12px"><text x="1554.5" y="102.5">Public:</text><text x="1554.5" y="116.5">    void draw();</text><text x="1554.5" y="130.5">            void update();</text><text x="1554.5" y="144.5">            void addEntity(std::string name, Entity *entity);</text><text x="1554.5" y="158.5">            void removeEntity(Entity *entity);</text><text x="1554.5" y="172.5">            std::unique_ptr&lt;Entity&gt; &amp;getEntity(std::string name);</text><text x="1554.5" y="200.5">Private:</text><text x="1554.5" y="214.5">            std::vector&lt;std::pair&lt;std::string, std::unique_ptr&lt;Entity&gt;&gt;&gt; _entities;</text></g><path d="M 1577.5 311 L 1577.5 285 L 1913.5 285 L 1913.5 311" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 1577.5 311 L 1577.5 572 L 1913.5 572 L 1913.5 311" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 1577.5 311 L 1913.5 311" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1745" y="302.5">Entity</text></g><rect x="1577.5" y="311" width="336" height="261" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-1582-316-328-261-0)" font-size="12px"><text x="1583" y="328.5">Public:</text><text x="1583" y="342.5">    Entity() {};</text><text x="1583" y="356.5">            virtual ~Entity() = default;</text><text x="1583" y="370.5">            template &lt;typename T, typename... TArgs&gt;</text><text x="1583" y="384.5">            inline T &amp;addComponent(TArgs &amp;&amp;...args);</text><text x="1583" y="398.5">            template &lt;typename T&gt;</text><text x="1583" y="412.5">            inline T &amp;getComponent() const;</text><text x="1583" y="426.5">            template &lt;typename T&gt;</text><text x="1583" y="440.5">            inline bool hasComponent() const;</text><text x="1583" y="454.5">    inline void destroy();</text><text x="1583" y="468.5">    inline void draw();</text><text x="1583" y="482.5">    inline void update()</text><text x="1583" y="510.5">Private:</text><text x="1583" y="524.5">            ComponentList comptList;</text><text x="1583" y="538.5">            ComponentBitset compBitset;</text><text x="1583" y="552.5">            std::vector&lt;std::unique_ptr&lt;IComponent&gt;&gt; components;</text></g><path d="M 1045.5 480 L 1045.5 454 L 1524.5 454 L 1524.5 480" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 1045.5 480 L 1045.5 708 L 1524.5 708 L 1524.5 480" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 1045.5 480 L 1524.5 480" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1284.5" y="471.5">Button</text></g><rect x="1045.5" y="480" width="479" height="228" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-1050-485-471-228-0)" font-size="12px"><text x="1051" y="497.5">Public:</text><text x="1051" y="511.5">    Button(std::string id, sf::Vector2f pos, sf::Vector2f scale, sf::RenderWindow &amp;window);</text><text x="1051" y="525.5">    bool init() override;</text><text x="1051" y="539.5">    void draw() override;</text><text x="1051" y="553.5">    void update() override;</text><text x="1051" y="567.5">    void setScale(float x, float y);</text><text x="1051" y="581.5">    void setPosition(float x, float y);</text><text x="1051" y="595.5">    sf::Vector2f getPosition();</text><text x="1051" y="609.5">    sf::Vector2f getScale();</text><text x="1051" y="623.5">    sf::Vector2f getSize();</text><text x="1051" y="637.5">    sf::Sprite &amp;getButton();</text><text x="1051" y="651.5">    int getClick(clickEnum click, sf::Vector2i pos);</text><text x="1051" y="679.5">Private:</text><text x="1051" y="693.5">            sf::Sprite _button;</text></g><path d="M 90 470 L 90 444 L 749 444 L 749 470" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 90 470 L 90 953 L 749 953 L 749 470" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 90 470 L 749 470" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="419" y="461.5">Ennemy</text></g><rect x="90" y="470" width="659" height="483" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-94-475-651-483-0)" font-size="12px"><text x="95.5" y="487.5">Public:</text><text x="95.5" y="501.5">    Ennemy(std::string id, sf::RenderWindow &amp;window);</text><text x="95.5" y="515.5">    bool init() override;</text><text x="95.5" y="529.5">    void draw() override;</text><text x="95.5" y="543.5">    void update() override;</text><text x="95.5" y="557.5">    void createEnnemy(int nbEnnemy, std::string spriteId, bool special_enemy);</text><text x="95.5" y="571.5">    void createBoss(std::string spriteId);</text><text x="95.5" y="585.5">    void createSbire(std::string spriteId, int x, int y);</text><text x="95.5" y="599.5">    void move(float x, float y);</text><text x="95.5" y="613.5">    void spriteAnimation(std::string id, int nbr_clock, sf::IntRect *rect, float max_value, float offset, int speed);</text><text x="95.5" y="627.5">    void sbireAnimation(std::string id, int nbr_clock, sf::IntRect *rect, float min_value, float max_value, float offset, int speed);</text><text x="95.5" y="641.5">    void sbireBoost(std::string id, sf::IntRect *rect, float max);</text><text x="95.5" y="655.5">    void bulletAnimation(std::string id, int nbr_clock, sf::IntRect *rect, float max_value, float offset, int speed);</text><text x="95.5" y="669.5">    void createBullet(std::string id, float gap);</text><text x="95.5" y="683.5">    void setScale(float x, float y);</text><text x="95.5" y="697.5">    void setPosition(float x, float y);</text><text x="95.5" y="711.5">    std::vector&lt;sf::Vector2f&gt; getPosition();</text><text x="95.5" y="725.5">    sf::Vector2f getPosition_one();</text><text x="95.5" y="739.5">    std::vector&lt;sf::Sprite&gt; &amp;getBullets();</text><text x="95.5" y="753.5">    std::vector&lt;sf::Sprite&gt; &amp;getSprite();</text><text x="95.5" y="767.5">    void clear_spr(sf::Sprite spr);</text><text x="95.5" y="795.5">Private:</text><text x="95.5" y="809.5">    std::vector&lt;sf::Sprite&gt; _ennemys;</text><text x="95.5" y="823.5">            std::vector&lt;int&gt; _life;</text><text x="95.5" y="837.5">    sf::Sprite _sprite;</text><text x="95.5" y="851.5">    sf::IntRect frames[nFrames];</text><text x="95.5" y="879.5">            int iFrame = 0;</text><text x="95.5" y="893.5">            float time;</text><text x="95.5" y="907.5">            int nb_enemy = 3;</text><text x="95.5" y="921.5">            std::vector&lt;sf::Clock&gt; _clock;</text><text x="95.5" y="935.5">            std::vector&lt;sf::Sprite&gt; _bullets;</text></g><path d="M 269 1012 L 269 986 L 754 986 L 754 1012" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 269 1012 L 269 1282 L 754 1282 L 754 1012" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 269 1012 L 754 1012" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="511" y="1003.5">LifeBar</text></g><rect x="269" y="1012" width="485" height="270" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-273-1017-477-270-0)" font-size="12px"><text x="274.5" y="1029.5">Public:</text><text x="274.5" y="1043.5">    LifeBar(std::string id, sf::Vector2f pos, sf::Vector2f scale, sf::RenderWindow &amp;window);</text><text x="274.5" y="1057.5">    bool init() override;</text><text x="274.5" y="1071.5">    void draw() override;</text><text x="274.5" y="1085.5">    void update() override;</text><text x="274.5" y="1099.5">    void setScale(float x, float y);</text><text x="274.5" y="1113.5">    void setPosition(float x, float y);</text><text x="274.5" y="1127.5">    sf::Vector2f getPosition();</text><text x="274.5" y="1141.5">    sf::Vector2f getScale();</text><text x="274.5" y="1155.5">    sf::Vector2f getSize();</text><text x="274.5" y="1169.5">    void move(float x, float y);</text><text x="274.5" y="1183.5">    void lifeProgression(std::string id, sf::IntRect *rect, float offset);</text><text x="274.5" y="1197.5">    sf::Sprite &amp;getLifeBar();</text><text x="274.5" y="1225.5">Private:</text><text x="274.5" y="1239.5">            sf::Vector2f _pos;</text><text x="274.5" y="1253.5">            sf::Vector2f _scale;</text><text x="274.5" y="1267.5">            sf::Sprite _lifeBar;</text></g><path d="M 1045.5 776 L 1045.5 750 L 1408.5 750 L 1408.5 776" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 1045.5 776 L 1045.5 1078 L 1408.5 1078 L 1408.5 776" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 1045.5 776 L 1408.5 776" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1226.5" y="767.5">Life</text></g><rect x="1045.5" y="776" width="363" height="302" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-1050-781-355-302-0)" font-size="12px"><text x="1051" y="793.5">Public:</text><text x="1051" y="807.5">    Life(std::string id, std::string str, sf::RenderWindow &amp;window);</text><text x="1051" y="821.5">    bool init() override;</text><text x="1051" y="835.5">    void draw() override;</text><text x="1051" y="849.5">    void update() override;</text><text x="1051" y="863.5">    void setPosition(float x, float y);</text><text x="1051" y="877.5">    void setFontSize(int size);</text><text x="1051" y="891.5">    void setStyle(sf::Uint32 style);</text><text x="1051" y="905.5">    sf::Vector2f getPosition();</text><text x="1051" y="919.5">    int getFontSize();</text><text x="1051" y="933.5">    void setText(std::string text);</text><text x="1051" y="947.5">    void setFont(std::string id);</text><text x="1051" y="961.5">    void setLife(int life);</text><text x="1051" y="989.5">Private:</text><text x="1051" y="1003.5">    std::string _str;</text><text x="1051" y="1017.5">            sf::Vector2f _pos;</text><text x="1051" y="1031.5">            int fontSize;</text><text x="1051" y="1045.5">            sf::Text _life;</text><text x="1051" y="1059.5">            sf::Font _font;</text></g><path d="M 1045.5 1150 L 1045.5 1124 L 1536.5 1124 L 1536.5 1150" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 1045.5 1150 L 1045.5 1407 L 1536.5 1407 L 1536.5 1150" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 1045.5 1150 L 1536.5 1150" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1290.5" y="1141.5">Parallax</text></g><rect x="1045.5" y="1150" width="491" height="257" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-1050-1155-483-257-0)" font-size="12px"><text x="1051" y="1167.5">Public:</text><text x="1051" y="1181.5">    Parallax(std::string id, sf::Vector2f pos, sf::Vector2f scale, sf::RenderWindow &amp;window);</text><text x="1051" y="1195.5">    bool init() override;</text><text x="1051" y="1209.5">    void draw() override;</text><text x="1051" y="1223.5">    void update() override;</text><text x="1051" y="1237.5">    void move(float x, float y);</text><text x="1051" y="1251.5">    void setScale(float x, float y);</text><text x="1051" y="1265.5">    void setPosition(float x, float y);</text><text x="1051" y="1279.5">    sf::Vector2f getPosition();</text><text x="1051" y="1293.5">    sf::Vector2f getScale();</text><text x="1051" y="1307.5">    sf::Vector2f getSize();</text><text x="1051" y="1321.5">    sf::Sprite &amp;getSprite();</text><text x="1051" y="1349.5">Private:</text><text x="1051" y="1363.5">            sf::Vector2f _pos;</text><text x="1051" y="1377.5">            sf::Vector2f _scale;</text><text x="1051" y="1391.5">            sf::Sprite _sprite;</text></g><path d="M 224 1344 L 224 1318 L 754 1318 L 754 1344" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 224 1344 L 224 1635 L 754 1635 L 754 1344" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 224 1344 L 754 1344" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="488.5" y="1335.5">ProgressBar</text></g><rect x="224" y="1344" width="530" height="291" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-228-1349-522-291-0)" font-size="12px"><text x="229.5" y="1361.5">Public:</text><text x="229.5" y="1375.5">    ProgressionBar(std::string id, sf::Vector2f pos, sf::Vector2f scale, sf::RenderWindow &amp;window);</text><text x="229.5" y="1389.5">    bool init() override;</text><text x="229.5" y="1403.5">    void draw() override;</text><text x="229.5" y="1417.5">    void update() override;</text><text x="229.5" y="1431.5">    void setScale(float x, float y);</text><text x="229.5" y="1445.5">    void setPosition(float x, float y);</text><text x="229.5" y="1459.5">    void spriteProgression(std::string id, sf::IntRect *rect, float offset);</text><text x="229.5" y="1473.5">    sf::Vector2f getPosition();</text><text x="229.5" y="1487.5">    sf::Vector2f getScale();</text><text x="229.5" y="1501.5">    sf::Vector2f getSize();</text><text x="229.5" y="1515.5">    void move(float x, float y);</text><text x="229.5" y="1529.5">    sf::Sprite &amp;getprogression_bar();</text><text x="229.5" y="1557.5">Private:</text><text x="229.5" y="1571.5">            sf::Vector2f _pos;</text><text x="229.5" y="1585.5">            sf::Vector2f _scale;</text><text x="229.5" y="1599.5">            sf::Sprite _progression_bar;</text><text x="229.5" y="1613.5">            buffBonus _bonus;</text><text x="229.5" y="1627.5">            bool end_bar = false;</text></g><path d="M 1045.5 1486 L 1045.5 1460 L 1557.5 1460 L 1557.5 1486" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 1045.5 1486 L 1045.5 1883 L 1557.5 1883 L 1557.5 1486" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 1045.5 1486 L 1557.5 1486" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1301" y="1477.5">SpaceShip</text></g><rect x="1045.5" y="1486" width="512" height="397" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-1050-1491-504-397-0)" font-size="12px"><text x="1051" y="1503.5">Public:</text><text x="1051" y="1517.5">    SpaceShip(std::string id, sf::Vector2f pos, sf::Vector2f scale, sf::RenderWindow &amp;window);</text><text x="1051" y="1531.5">    bool init() override;</text><text x="1051" y="1545.5">    void draw() override;</text><text x="1051" y="1559.5">    void update() override;</text><text x="1051" y="1573.5">    void createBullet();</text><text x="1051" y="1587.5">    void setScale(float x, float y);</text><text x="1051" y="1601.5">    void setPosition(float x, float y);</text><text x="1051" y="1615.5">    sf::Vector2f getPosition();</text><text x="1051" y="1629.5">    sf::Vector2f getScale();</text><text x="1051" y="1643.5">    sf::Vector2f getSize();</text><text x="1051" y="1657.5">    void move(float x, float y);</text><text x="1051" y="1671.5">    sf::Sprite &amp;getSprite();</text><text x="1051" y="1685.5">    std::vector&lt;sf::Sprite&gt; &amp;getBullets();</text><text x="1051" y="1699.5">    void removeBullet();</text><text x="1051" y="1713.5">    void setplayerId(int id);</text><text x="1051" y="1727.5">    int getplayerId();</text><text x="1051" y="1741.5">    void setActive(bool active);</text><text x="1051" y="1755.5">    bool getActive();</text><text x="1051" y="1783.5">Private:</text><text x="1051" y="1797.5">            sf::Vector2f _pos;</text><text x="1051" y="1811.5">            sf::Vector2f _scale;</text><text x="1051" y="1825.5">            sf::Sprite _sprite;</text><text x="1051" y="1839.5">            std::vector&lt;sf::Sprite&gt; _bullets;</text><text x="1051" y="1853.5">            buffBonus _bonus;</text><text x="1051" y="1867.5">            int _playerId;</text></g><path d="M 264 1709 L 264 1683 L 754 1683 L 754 1709" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 264 1709 L 264 1990 L 754 1990 L 754 1709" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 264 1709 L 754 1709" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="508.5" y="1700.5">Sprite</text></g><rect x="264" y="1709" width="490" height="281" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-268-1714-482-281-0)" font-size="12px"><text x="269.5" y="1726.5">Public:</text><text x="269.5" y="1740.5">    Sprite(std::string id, sf::Vector2f pos, sf::Vector2f scale, sf::RenderWindow &amp;window);</text><text x="269.5" y="1754.5">    bool init() override;</text><text x="269.5" y="1768.5">    void draw() override;</text><text x="269.5" y="1782.5">    void update() override;</text><text x="269.5" y="1796.5">    void setScale(float x, float y);</text><text x="269.5" y="1810.5">    void setPosition(float x, float y);</text><text x="269.5" y="1824.5">    sf::Vector2f getPosition();</text><text x="269.5" y="1838.5">    int bonusRemaining(int act_value, buffBonus bonus);</text><text x="269.5" y="1852.5">    void createBonus(int nbBonus, std::string spriteId, bool big);</text><text x="269.5" y="1866.5">    sf::Vector2f getSize();</text><text x="269.5" y="1880.5">    void move(float x, float y);</text><text x="269.5" y="1894.5">    sf::Sprite &amp;getSprite();</text><text x="269.5" y="1922.5">Private:</text><text x="269.5" y="1936.5">            sf::Vector2f _pos;</text><text x="269.5" y="1950.5">            sf::Vector2f _scale;</text><text x="269.5" y="1964.5">            sf::Sprite _sprite;</text><text x="269.5" y="1978.5">            buffBonus _bonus;</text></g><path d="M 1045.5 1943 L 1045.5 1917 L 1329.5 1917 L 1329.5 1943" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 1045.5 1943 L 1045.5 2227 L 1329.5 2227 L 1329.5 1943" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 1045.5 1943 L 1329.5 1943" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="1187" y="1934.5">Text</text></g><rect x="1045.5" y="1943" width="284" height="284" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-1050-1948-276-284-0)" font-size="12px"><text x="1051" y="1960.5">Public:</text><text x="1051" y="1974.5">    Text(std::string str, sf::RenderWindow &amp;window);</text><text x="1051" y="1988.5">    bool init() override;</text><text x="1051" y="2002.5">    void draw() override;</text><text x="1051" y="2016.5">    void update() override;</text><text x="1051" y="2030.5">    void setPosition(float x, float y);</text><text x="1051" y="2044.5">    void setFontSize(int size);</text><text x="1051" y="2058.5">    void setStyle(sf::Uint32 style);</text><text x="1051" y="2072.5">    sf::Vector2f getPosition();</text><text x="1051" y="2086.5">    int getFontSize();</text><text x="1051" y="2100.5">    void setText(std::string text);</text><text x="1051" y="2114.5">    void setFont(std::string id);</text><text x="1051" y="2142.5">Private:</text><text x="1051" y="2156.5">            std::vector&lt;sf::Text&gt; _text;</text><text x="1051" y="2170.5">            std::string _str;</text><text x="1051" y="2184.5">            sf::Vector2f _pos;</text><text x="1051" y="2198.5">            int fontSize;</text><text x="1051" y="2212.5">            sf::Font _font;</text></g><path d="M 3451.5 129 L 3451.5 103 L 3962.5 103 L 3962.5 129" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 3451.5 129 L 3451.5 552 L 3962.5 552 L 3962.5 129" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 3451.5 129 L 3962.5 129" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="3706.5" y="120.5">AssetManager</text></g><rect x="3451.5" y="129" width="511" height="423" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-3456-134-503-423-0)" font-size="12px"><text x="3457" y="146.5">Public:</text><text x="3457" y="160.5">            AssetManager();</text><text x="3457" y="174.5">            ~AssetManager() = default;</text><text x="3457" y="202.5">        void cleanAsset();</text><text x="3457" y="230.5">        sf::Texture getTexture(std::string id);</text><text x="3457" y="244.5">        sf::Text getText(std::string id);</text><text x="3457" y="258.5">        sf::Sprite getSprite(std::string id);</text><text x="3457" y="272.5">        sf::Font getFont(std::string id);</text><text x="3457" y="286.5">        std::unordered_map&lt;std::string, sf::Sprite&gt; &amp;getAllSprite();</text><text x="3457" y="314.5">        void loadTexture(std::string id, std::string path);</text><text x="3457" y="328.5">        void loadSprite(std::string id, std::string path);</text><text x="3457" y="342.5">        void loadAnimateSprite(std::string id, std::string idTexture, int x, int y, int width, int height);</text><text x="3457" y="356.5">        void loadFont(std::string id, std::string path);</text><text x="3457" y="370.5">        void animatingSprite(std::string id, int x, int y, int width, int height);</text><text x="3457" y="384.5">        void setSpritePosition(std::string id, sf::Vector2f position);</text><text x="3457" y="398.5">        void setSpriteScale(std::string id, sf::Vector2f scale);</text><text x="3457" y="412.5">        void setSpriteRotation(std::string id, float rotation);</text><text x="3457" y="440.5">        inline static AssetManager &amp;getInstance();</text><text x="3457" y="468.5">    Private:</text><text x="3457" y="482.5">            static AssetManager *_instance;</text><text x="3457" y="496.5">            std::unordered_map&lt;std::string, sf::Texture&gt; _textures;</text><text x="3457" y="510.5">            std::unordered_map&lt;std::string, sf::Sprite&gt; _sprites;</text><text x="3457" y="524.5">            std::unordered_map&lt;std::string, sf::Text&gt; _texts;</text><text x="3457" y="538.5">            std::unordered_map&lt;std::string, sf::Font&gt; _fonts;</text></g><path d="M 2866 39 L 2866 13 L 3320 13 L 3320 39" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 2866 39 L 2866 505 L 3320 505 L 3320 39" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 2866 39 L 3320 39" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="3092.5" y="30.5">Server</text></g><rect x="2866" y="39" width="454" height="466" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-2870-44-446-466-0)" font-size="12px"><text x="2871.5" y="84.5">public:</text><text x="2871.5" y="112.5">        server(int _port) : _socket(_io_service, udp::endpoint(udp::v4(), _port);</text><text x="2871.5" y="126.5">        ~server():</text><text x="2871.5" y="154.5">        void startReceive();</text><text x="2871.5" y="168.5">        void startSend(udp::endpoint endpoint);</text><text x="2871.5" y="182.5">        void handleReceive(udp::endpoint endpoint, const boost::system::error_code&amp; error, size_t bytes_recvd);</text><text x="2871.5" y="196.5">        void handleSend(std::string message, udp::endpoint _endpoint, const boost::system::error_code&amp; error, size_t bytes_recvd);</text><text x="2871.5" y="210.5">        void sendToAllPlayers(std::string message);</text><text x="2871.5" y="224.5">        void addNewPlayer(udp::endpoint endpoint);</text><text x="2871.5" y="238.5">        void runIos();</text><text x="2871.5" y="252.5">        int getAvailableId();</text><text x="2871.5" y="266.5">        void printPlayers();</text><text x="2871.5" y="280.5">        void createEnnemies();</text><text x="2871.5" y="294.5">        void spawnEnnemy(int ennemyId, float seconds, sf::Clock &amp;clockDurationEnemy, sf::Time &amp;timeDurationEnemy);</text><text x="2871.5" y="308.5">        int getPort() ;</text><text x="2871.5" y="322.5">        void stopServer();</text><text x="2871.5" y="336.5">        void enterThreadsAndRunIos();</text><text x="2871.5" y="350.5">        void getPrompt();</text><text x="2871.5" y="364.5">        int dealWithInput(std::string input);</text><text x="2871.5" y="378.5">        void enterThreads();</text><text x="2871.5" y="392.5">        void createBossThread();</text><text x="2871.5" y="406.5">        void createMiniBossThread();</text><text x="2871.5" y="420.5">        void clearServerStatus();</text><text x="2871.5" y="434.5">        void bossThread();</text><text x="2871.5" y="448.5">        void miniBossThread();</text><text x="2871.5" y="462.5">        std::thread::id getThreadId();</text><text x="2871.5" y="476.5">        void checkPlayerPing(std::string &amp;message);</text><text x="2871.5" y="490.5">        void createBonus(int bonusId, float seconds, sf::Clock &amp;clockDurationBonus, sf::Time &amp;timeDurationBonus);</text></g><path d="M 2078 176 L 2078 150 L 2604 150 L 2604 176" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 2078 176 L 2078 552 L 2604 552 L 2604 176" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 2078 176 L 2604 176" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="2340.5" y="167.5">Client</text></g><rect x="2078" y="176" width="526" height="376" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-2082-181-518-376-0)" font-size="12px"><text x="2083.5" y="193.5">public:</text><text x="2083.5" y="207.5">        client();</text><text x="2083.5" y="221.5">        ~client();</text><text x="2083.5" y="249.5">        void startReceive();</text><text x="2083.5" y="263.5">        void handleReceive(const boost::system::error_code&amp; error, size_t bytes_recvd);</text><text x="2083.5" y="277.5">        void startConnectionWithServer();</text><text x="2083.5" y="291.5">        void closeConnectionWithServer();</text><text x="2083.5" y="305.5">        void resetReceived();</text><text x="2083.5" y="319.5">        void sender(std::string msg);</text><text x="2083.5" y="333.5">        void startClientThread();</text><text x="2083.5" y="347.5">        void runClientThread();</text><text x="2083.5" y="361.5">        void init(std::string host, std::string port);</text><text x="2083.5" y="375.5">        bool getClientConnected() { return _client_connected; };</text><text x="2083.5" y="389.5">        boost::asio::io_service &amp;getIOservice() { return _ios; }</text><text x="2083.5" y="403.5">        bool isMsgQueueEmpty() { return _msg_queue.isEmpty(); }</text><text x="2083.5" y="417.5">        std::string popMsgQueue() { return _msg_queue.Pop(); }</text><text x="2083.5" y="431.5">        void setPlayerId(int player_id) { this-&gt;_player_id = player_id; }</text><text x="2083.5" y="445.5">        void setClientConnected(bool connected) { _client_connected = connected; }</text><text x="2083.5" y="459.5">        bool isClientConnected() { return _client_connected; }</text><text x="2083.5" y="473.5">        void setThreadRunning(bool value) { _client_thread_running.set(value); }</text><text x="2083.5" y="487.5">        int getPlayerId() { return _player_id; }</text></g><path d="M 3193 759 L 3193 779 L 3193 791.63" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 3193 796.88 L 3189.5 789.88 L 3193 791.63 L 3196.5 789.88 Z" fill="#666666" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 3084 632 L 3084 606 L 3302 606 L 3302 632" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 3084 632 L 3084 759 L 3302 759 L 3302 632" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 3084 632 L 3302 632" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="3192.5" y="623.5">ISafeQueue</text></g><rect x="3084" y="632" width="218" height="127" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-3088-637-210-127-0)" font-size="12px"><text x="3089.5" y="649.5">Public:    </text><text x="3089.5" y="663.5">    virtual ~ISafeQueue() = default;</text><text x="3089.5" y="677.5">            virtual void Push(T value) = 0;</text><text x="3089.5" y="691.5">            virtual bool TryPop(T &amp;value) = 0;</text><text x="3089.5" y="705.5">            virtual void PrintValues() = 0;</text><text x="3089.5" y="719.5">            virtual T Pop() = 0;</text><text x="3089.5" y="733.5">            virtual bool isEmpty() = 0;</text><text x="3089.5" y="747.5">            virtual T getFront() = 0;</text></g><path d="M 3102.5 824 L 3102.5 798 L 3283.5 798 L 3283.5 824" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 3102.5 824 L 3102.5 1068 L 3283.5 1068 L 3283.5 824" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 3102.5 824 L 3283.5 824" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="3192.5" y="815.5">SafeQueue</text></g><rect x="3102.5" y="824" width="181" height="244" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-3107-829-173-244-0)" font-size="12px"><text x="3108" y="841.5">Public:</text><text x="3108" y="855.5">            SafeQueue();</text><text x="3108" y="869.5">            virtual ~SafeQueue();</text><text x="3108" y="883.5">            void Push(T value);</text><text x="3108" y="897.5">            bool TryPop(T &amp;value);</text><text x="3108" y="911.5">            void PrintValues();</text><text x="3108" y="925.5">            T Pop();</text><text x="3108" y="939.5">            size_t GetQueueSize();</text><text x="3108" y="953.5">            bool isEmpty();</text><text x="3108" y="967.5">            T getFront();</text><text x="3108" y="995.5">   Private:</text><text x="3108" y="1009.5">            std::queue&lt;T&gt; _queue;</text><text x="3108" y="1023.5">            std::mutex _mtx;</text><text x="3108" y="1037.5">            std::condition_variable _cv;</text><text x="3108" y="1051.5">            bool _isRunning = true;</text></g><path d="M 2689 616 L 2689 590 L 3040 590 L 3040 616" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 2689 616 L 2689 1102 L 3040 1102 L 3040 616" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 2689 616 L 3040 616" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="2864" y="607.5">Graphics</text></g><rect x="2689" y="616" width="351" height="486" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-2693-621-343-486-0)" font-size="12px"><text x="2694.5" y="633.5">public:</text><text x="2694.5" y="661.5">        Window();</text><text x="2694.5" y="675.5">        Window(client &amp;client);</text><text x="2694.5" y="689.5">        ~Window();</text><text x="2694.5" y="717.5">        sf::RenderWindow &amp;getWindow();</text><text x="2694.5" y="731.5">        sceneEnum getScene();</text><text x="2694.5" y="745.5">        client &amp;getClient();</text><text x="2694.5" y="759.5">        void setGameScene(sceneEnum scene);</text><text x="2694.5" y="773.5">        bool getIsClientConnected();</text><text x="2694.5" y="787.5">        void setIsClientConnected(bool isClientConnected);</text><text x="2694.5" y="801.5">        void clearWindow();</text><text x="2694.5" y="815.5">        void refreshWindow();</text><text x="2694.5" y="829.5">        void draw(System &amp;system);</text><text x="2694.5" y="843.5">        void update(System &amp;system);</text><text x="2694.5" y="857.5">        sf::Music *getMusic();</text><text x="2694.5" y="871.5">        void increaseBossKilled();</text><text x="2694.5" y="885.5">        int getBossKilled();</text><text x="2694.5" y="899.5">        void increaseScore();</text><text x="2694.5" y="913.5">        int getScore();</text></g><path d="M 2075 589 L 2075 563 L 2558 563 L 2558 589" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 2075 589 L 2075 1171 L 2558 1171 L 2558 589" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 2075 589 L 2558 589" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="2316" y="580.5">Game</text></g><rect x="2075" y="589" width="483" height="582" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-2079-594-475-582-0)" font-size="12px"><text x="2080.5" y="606.5">Public:</text><text x="2080.5" y="620.5">            Game(graphics &amp;g, client &amp;client, System &amp;system);</text><text x="2080.5" y="634.5">            ~Game();</text><text x="2080.5" y="648.5">            void dealWithEvents(sf::RenderWindow &amp;window, System &amp;system, Game &amp;game);</text><text x="2080.5" y="662.5">            bool getCollision(sf::Sprite &amp;spriteOne, sf::Sprite &amp;spriteTwo);</text><text x="2080.5" y="676.5">            void removeOneLife(System &amp;system);</text><text x="2080.5" y="690.5">            void oneKill(System &amp;system);</text><text x="2080.5" y="704.5">            int getLife();</text><text x="2080.5" y="718.5">            client &amp;getClient() { return _client; }</text><text x="2080.5" y="732.5">            sf::Clock _clockGame;</text><text x="2080.5" y="746.5">            sf::Time _timeGame;</text><text x="2080.5" y="760.5">            sf::Clock _clockDuration;</text><text x="2080.5" y="774.5">            sf::Time _timeDuration;</text><text x="2080.5" y="788.5">            std::vector&lt;sf::Clock&gt; _clockDurationEnemy;</text><text x="2080.5" y="802.5">            std::vector&lt;sf::Time&gt; _timeDurationEnemy;</text><text x="2080.5" y="816.5">            std::vector&lt;sf::Clock&gt; _clockDurationBonus;</text><text x="2080.5" y="830.5">            std::vector&lt;sf::Time&gt; _timeDurationBonus;</text><text x="2080.5" y="844.5">            sf::Clock _clockShoot;</text><text x="2080.5" y="858.5">            sf::Time _timeShoot;</text><text x="2080.5" y="872.5">            std::vector&lt;sf::Clock&gt; _clockShootEnemy;</text><text x="2080.5" y="886.5">            std::vector&lt;sf::Time&gt; _timeShootEnemy;</text><text x="2080.5" y="900.5">            std::vector&lt;sf::Clock&gt; _clockSpawnBonus;</text><text x="2080.5" y="914.5">            std::vector&lt;sf::Time&gt; _timeSpawnBonus;</text><text x="2080.5" y="928.5">            sf::Event event;</text><text x="2080.5" y="942.5">            graphics &amp;_graphics;</text><text x="2080.5" y="956.5">            System &amp;_system;</text><text x="2080.5" y="970.5">            void updateGameWithServerCommands();</text><text x="2080.5" y="984.5">            void getIntoLobby(int player_id);</text><text x="2080.5" y="998.5">            void movePlayers(std::string msg);</text><text x="2080.5" y="1012.5">            void createNewBullet(std::string msg);</text><text x="2080.5" y="1026.5">            void setPlayerId(int player_id);</text><text x="2080.5" y="1040.5">            int getPlayerId();</text><text x="2080.5" y="1068.5">Private:</text><text x="2080.5" y="1082.5">            client &amp;_client;</text><text x="2080.5" y="1096.5">            bool spawn_ok = false;</text><text x="2080.5" y="1110.5">            int _kill;</text><text x="2080.5" y="1124.5">            int _kill_manage_bar;</text><text x="2080.5" y="1138.5">            std::queue&lt;sf::Keyboard&gt; _events;</text><text x="2080.5" y="1152.5">            int _player_id; </text></g><path d="M 2068 1234 L 2068 1208 L 2551 1208 L 2551 1234" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 2068 1234 L 2068 1640 L 2551 1640 L 2551 1234" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 2068 1234 L 2551 1234" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="2309" y="1225.5">Menu</text></g><rect x="2068" y="1234" width="483" height="406" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-2072-1239-475-406-0)" font-size="12px"><text x="2073.5" y="1251.5">public:</text><text x="2073.5" y="1279.5">        Menu(client &amp;client, Window &amp;window);</text><text x="2073.5" y="1293.5">        ~Menu();</text><text x="2073.5" y="1321.5">        void loop();</text><text x="2073.5" y="1335.5">        void init();</text><text x="2073.5" y="1349.5">        void initMain();</text><text x="2073.5" y="1363.5">        void initSingleplayer();</text><text x="2073.5" y="1377.5">        void initMultiplayer();</text><text x="2073.5" y="1391.5">        void initCreateServer();</text><text x="2073.5" y="1405.5">        void initJoinServer();</text><text x="2073.5" y="1419.5">        void initAsset();</text><text x="2073.5" y="1433.5">        void setScene(MenuScene scene);</text><text x="2073.5" y="1447.5">        void getEventMain();</text><text x="2073.5" y="1461.5">        void getEventSingleplayer();</text><text x="2073.5" y="1475.5">        void getEventMultiplayer();</text><text x="2073.5" y="1489.5">        void getEventCreateServer();</text><text x="2073.5" y="1503.5">        void getEventJoinServer();</text><text x="2073.5" y="1517.5">        void handleParallax(System *sys);</text><text x="2073.5" y="1531.5">        void connectClient(std::string host, std::string port);</text><text x="2073.5" y="1545.5">        void handleConsole(sf::Event event);</text><text x="2073.5" y="1559.5">        void createServerBox();</text><text x="2073.5" y="1573.5">        void loopMain(System &amp;system);</text><text x="2073.5" y="1587.5">        void loopSingleplayer(System &amp;system);</text><text x="2073.5" y="1601.5">        void loopMultiplayer(System &amp;system);</text><text x="2073.5" y="1615.5">        void loopCreateServer(System &amp;system);</text><text x="2073.5" y="1629.5">        void loopJoinServer(System &amp;system);</text></g><path d="M 2068 1700 L 2068 1674 L 2551 1674 L 2551 1700" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 2068 1700 L 2068 1904 L 2551 1904 L 2551 1700" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 2068 1700 L 2551 1700" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="2309" y="1691.5">End</text></g><rect x="2068" y="1700" width="483" height="204" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-2072-1705-475-204-0)" font-size="12px"><text x="2073.5" y="1717.5">public:</text><text x="2073.5" y="1731.5">        End();</text><text x="2073.5" y="1745.5">        End(client &amp;client, Window &amp;window);</text><text x="2073.5" y="1759.5">        ~End();</text><text x="2073.5" y="1787.5">        void loop();</text><text x="2073.5" y="1801.5">        void init();</text><text x="2073.5" y="1815.5">        void initAsset();</text><text x="2073.5" y="1829.5">        void getEvent();</text><text x="2073.5" y="1843.5">        void handleParallax();</text><text x="2073.5" y="1857.5">        void sendQuitAndClose();</text><text x="2073.5" y="1871.5">        void sendChangeScene();</text><text x="2073.5" y="1885.5">        void leaderBoardHandler();</text></g><path d="M 2645 1234 L 2645 1208 L 3128 1208 L 3128 1234" fill="#f5f5f5" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 2645 1234 L 2645 2012 L 3128 2012 L 3128 1234" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><path d="M 2645 1234 L 3128 1234" fill="none" stroke="#666666" stroke-miterlimit="10" pointer-events="none"/><g fill="#333333" font-family="Helvetica" font-weight="bold" pointer-events="none" text-anchor="middle" font-size="12px"><text x="2886" y="1225.5">GamePlay</text></g><rect x="2645" y="1234" width="483" height="778" fill="#f5f5f5" stroke="#666666" pointer-events="none"/><g fill="#333333" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-2649-1239-475-778-0)" font-size="12px"><text x="2650.5" y="1251.5">public:</text><text x="2650.5" y="1265.5">        GamePlay();</text><text x="2650.5" y="1279.5">        GamePlay(client &amp;client, Window &amp;window);</text><text x="2650.5" y="1293.5">        ~GamePlay();</text><text x="2650.5" y="1321.5">        void loop();</text><text x="2650.5" y="1335.5">        void init();</text><text x="2650.5" y="1349.5">        void handleServerCommand();</text><text x="2650.5" y="1363.5">        void tryConnectToServer();</text><text x="2650.5" y="1377.5">        System &amp;getSystem();</text><text x="2650.5" y="1391.5">        void getIntoLobby(int playerId);</text><text x="2650.5" y="1405.5">        void movePlayers(std::string msg);</text><text x="2650.5" y="1419.5">        void createNewBullet(std::string msg);</text><text x="2650.5" y="1433.5">        void createNewEnnemy(std::string msg);</text><text x="2650.5" y="1447.5">        void createNewBonus(std::string msg);</text><text x="2650.5" y="1461.5">        void updateStage(std::string msg);</text><text x="2650.5" y="1475.5">        void createBoss(int stage);</text><text x="2650.5" y="1489.5">        void createMiniBoss();</text><text x="2650.5" y="1503.5">        void resetPlayerPosition(std::string msg);</text><text x="2650.5" y="1517.5">        void activePlayers(std::string msg);</text><text x="2650.5" y="1531.5">        void receiveMessageFromPlayer(std::string msg);</text><text x="2650.5" y="1545.5">        void setSpaceShip();</text><text x="2650.5" y="1559.5">        void getPlayerInput(sf::Event event);</text><text x="2650.5" y="1573.5">        bool getCollision(sf::Sprite &amp;spriteOne, sf::Sprite &amp;spriteTwo);</text><text x="2650.5" y="1587.5">        void getCollisionBetweenPlayersAndMBosses();</text><text x="2650.5" y="1601.5">        void getCollisionBetweenBossAndWindow();</text><text x="2650.5" y="1615.5">        void createMiniBossBullet(std::string msg);</text><text x="2650.5" y="1629.5">        token_t getTokens(std::string msg);</text><text x="2650.5" y="1643.5">        void getTimeFromClocks();</text><text x="2650.5" y="1657.5">        void handleParallax();</text><text x="2650.5" y="1671.5">        void handleEnnemyMovement();</text><text x="2650.5" y="1685.5">        void handleCollision();</text><text x="2650.5" y="1699.5">        void sendSpecificCommandToServer();</text><text x="2650.5" y="1713.5">        void addProgression(std::string msg);</text><text x="2650.5" y="1727.5">        void makePollEvent();</text><text x="2650.5" y="1741.5">        void setPlayerId(int player_id);</text><text x="2650.5" y="1755.5">        sf::Keyboard::Key getEventQueueFront();</text><text x="2650.5" y="1769.5">        void pushKeyIntoQueue(sf::Keyboard::Key key);</text><text x="2650.5" y="1783.5">        bool isEventQueueEmpty();</text><text x="2650.5" y="1797.5">        void createFinalBossBullet(std::string msg);</text><text x="2650.5" y="1811.5">        void getInputKeysForConsole(sf::Event event);</text><text x="2650.5" y="1825.5">        void checkConsoleCommand();</text><text x="2650.5" y="1839.5">        void leaveConsole();</text><text x="2650.5" y="1853.5">        int getPlayerLife();</text><text x="2650.5" y="1867.5">        void setPlayerLife();</text><text x="2650.5" y="1881.5">        int getStage();</text><text x="2650.5" y="1895.5">        void setStage(int stage);</text><text x="2650.5" y="1909.5">        int getUpOrDown();</text><text x="2650.5" y="1923.5">        void setUpOrDown(int up_or_down);</text><text x="2650.5" y="1937.5">        int getLeftOrRight();</text><text x="2650.5" y="1951.5">        void setLeftOrRight(int left_or_right);</text><text x="2650.5" y="1965.5">        bool getTouch();</text><text x="2650.5" y="1979.5">	        void setTouch(bool touch);</text><text x="2650.5" y="1993.5">        void getPing(std::string msg);</text></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>